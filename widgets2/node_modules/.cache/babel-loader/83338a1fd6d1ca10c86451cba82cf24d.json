{"ast":null,"code":"var _jsxFileName = \"/home/haeuncreative/app_academy/hw_lectures/w11/w11d2/widgets2/src/components/Auto.js\";\nimport React from 'react';\nimport { CSSTransition, TransitionGroup } from 'react-transition-group';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass AutoComplete extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.handleInput = e => {\n      this.setState({\n        inputVal: e.target.value\n      });\n    };\n\n    this.selectName = ({\n      target: {\n        innerText: name\n      }\n    }) => {\n      this.setState({\n        inputVal: name,\n        showList: false\n      });\n    };\n\n    this.handleAutocompleteSectionClick = ({\n      target\n    }) => {\n      if (!target.classList.contains(\"nameLi\")) {\n        this.inputRef.current.focus();\n      }\n    };\n\n    this.handleOutsideClick = () => {\n      // Leave dropdown visible as long as input is focused\n      if (document.activeElement === this.inputRef.current) return;else this.setState({\n        showList: false\n      });\n    };\n\n    this.matches = () => {\n      const {\n        inputVal\n      } = this.state;\n      const {\n        names\n      } = this.props;\n      const inputLength = inputVal.length;\n      const matches = [];\n      if (inputLength === 0) return names;\n      names.forEach(name => {\n        const nameSegment = name.slice(0, inputLength);\n\n        if (nameSegment.toLowerCase() === inputVal.toLowerCase()) {\n          matches.push(name);\n        }\n      });\n      if (matches.length === 0) matches.push('No matches');\n      return matches;\n    };\n\n    this.state = {\n      inputVal: '',\n      showList: false\n    };\n    this.inputRef = /*#__PURE__*/React.createRef();\n  }\n\n  componentDidUpdate() {\n    return;\n\n    if (this.state.showList) {\n      document.addEventListener('click', this.handleOutsideClick);\n    } else {\n      console.log(\"Removing Autocomplete listener on update!\");\n      document.removeEventListener('click', this.handleOutsideClick);\n    }\n  }\n\n  componentWillUnmount() {\n    console.log(\"Cleaning up event listener from Autocomplete!\");\n    document.removeEventListener('click', this.handleOutsideClick);\n  }\n\n  render() {\n    const results = this.matches().map(result => {\n      const nodeRef = /*#__PURE__*/React.createRef();\n      return /*#__PURE__*/_jsxDEV(CSSTransition, {\n        nodeRef: nodeRef,\n        classNames: \"result\",\n        timeout: {\n          enter: 500,\n          exit: 300\n        },\n        children: /*#__PURE__*/_jsxDEV(\"li\", {\n          ref: nodeRef,\n          className: \"nameLi\",\n          onClick: this.selectName,\n          children: result\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 11\n        }, this)\n      }, result, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 9\n      }, this);\n    });\n    return /*#__PURE__*/_jsxDEV(\"section\", {\n      className: \"autocomplete-section\",\n      onClick: this.handleAutocompleteSectionClick,\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Autocomplete\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"auto\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          placeholder: \"Search...\",\n          ref: this.inputRef,\n          onChange: this.handleInput,\n          value: this.state.inputVal,\n          onFocus: () => this.setState({\n            showList: true\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 11\n        }, this), this.state.showList && /*#__PURE__*/_jsxDEV(\"ul\", {\n          className: \"auto-dropdown\",\n          children: /*#__PURE__*/_jsxDEV(TransitionGroup, {\n            children: results\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 104,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default AutoComplete;","map":{"version":3,"sources":["/home/haeuncreative/app_academy/hw_lectures/w11/w11d2/widgets2/src/components/Auto.js"],"names":["React","CSSTransition","TransitionGroup","AutoComplete","Component","constructor","props","handleInput","e","setState","inputVal","target","value","selectName","innerText","name","showList","handleAutocompleteSectionClick","classList","contains","inputRef","current","focus","handleOutsideClick","document","activeElement","matches","state","names","inputLength","length","forEach","nameSegment","slice","toLowerCase","push","createRef","componentDidUpdate","addEventListener","console","log","removeEventListener","componentWillUnmount","render","results","map","result","nodeRef","enter","exit"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { CSSTransition, TransitionGroup } from 'react-transition-group';\n\nclass AutoComplete extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      inputVal: '',\n      showList: false\n    };\n    this.inputRef = React.createRef();\n  }\n\n  componentDidUpdate() {\n    return\n    if (this.state.showList) {\n      document.addEventListener('click', this.handleOutsideClick);\n    } else {\n      console.log(\"Removing Autocomplete listener on update!\");\n      document.removeEventListener('click', this.handleOutsideClick);\n    }\n  }\n\n  componentWillUnmount () {\n    console.log(\"Cleaning up event listener from Autocomplete!\");\n    document.removeEventListener('click', this.handleOutsideClick);\n  }\n\n  handleInput = (e) => {\n    this.setState({ inputVal: e.target.value });\n  }\n\n  selectName = ({ target:  { innerText: name }}) => {\n    this.setState({ inputVal: name, showList: false });\n  }\n\n  // Set focus to input field if user clicks anywhere inside the Autocomplete\n  // section (unless they have selected a name from the dropdown list)\n  handleAutocompleteSectionClick = ({ target }) => {\n    if (!target.classList.contains(\"nameLi\")) {\n      this.inputRef.current.focus();\n    }\n  }\n\n  handleOutsideClick = () => {\n    // Leave dropdown visible as long as input is focused\n    if (document.activeElement === this.inputRef.current) return;\n    else this.setState({ showList: false });\n  }\n\n  matches = () => {\n    const { inputVal } = this.state;\n    const { names } = this.props;\n    const inputLength = inputVal.length;\n    const matches = [];\n\n    if (inputLength === 0) return names;\n\n    names.forEach(name => {\n      const nameSegment = name.slice(0, inputLength);\n      if (nameSegment.toLowerCase() === inputVal.toLowerCase()) {\n        matches.push(name);\n      }\n    });\n\n    if (matches.length === 0) matches.push('No matches');\n\n    return matches;\n  }\n\n  render() {\n    const results = this.matches().map((result) => {\n      const nodeRef = React.createRef();\n      return (\n        <CSSTransition\n          nodeRef={nodeRef}\n          key={result}\n          classNames=\"result\"\n          timeout={{ enter: 500, exit: 300 }}\n        >\n          <li ref={nodeRef} className=\"nameLi\" onClick={this.selectName}>\n            {result}\n          </li>\n        </CSSTransition>\n      )\n    });\n\n    return (\n      <section \n        className=\"autocomplete-section\" \n        onClick={this.handleAutocompleteSectionClick}\n      >\n        <h1>Autocomplete</h1>\n        <div className=\"auto\">\n          <input\n            placeholder=\"Search...\"\n            ref={this.inputRef}\n            onChange={this.handleInput}\n            value={this.state.inputVal}\n            onFocus={() => this.setState({ showList: true })}\n          />\n          {this.state.showList && (\n            <ul className=\"auto-dropdown\">\n              <TransitionGroup>\n                {results}\n              </TransitionGroup>\n            </ul>\n          )}\n        </div>\n      </section>\n    );\n  }\n}\n\nexport default AutoComplete;"]},"metadata":{},"sourceType":"module"}