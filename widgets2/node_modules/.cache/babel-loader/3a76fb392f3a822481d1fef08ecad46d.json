{"ast":null,"code":"var _jsxFileName = \"/home/haeuncreative/app_academy/hw_lectures/w11/w11d2/widgets2/src/components/Auto.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useRef } from 'react';\nimport { CSSTransition, TransitionGroup } from 'react-transition-group';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst AutoComplete = props => {\n  _s();\n\n  const [inputVal, setInputVal] = useState(\"\");\n  const [showList, setShowList] = useState(\"false\"); // constructor(props) {\n  //   super(props);\n  //   this.state = {\n  //     inputVal: '',\n  //     showList: false\n  //   };\n  //   this.inputRef = React.createRef();\n  // }\n\n  useEffect(() => {\n    if (showList) {\n      document.addEventListener('click', handleOutsideClick);\n    } else {\n      console.log(\"Removing Autocomplete listener on update!\");\n      document.removeEventListener('click', handleOutsideClick);\n    }\n\n    return () => {\n      console.log(\"Cleaning up event listener from Autocomplete!\");\n      document.removeEventListener('click', handleOutsideClick);\n    };\n  }, []);\n\n  const handleInput = e => {\n    setInputVal(e.target.value);\n  };\n\n  const selectName = ({\n    target: {\n      innerText: name\n    }\n  }) => {\n    setInputVal(name);\n    setShowList(false);\n  }; // Set focus to input field if user clicks anywhere inside the Autocomplete\n  // section (unless they have selected a name from the dropdown list)\n\n\n  const handleAutocompleteSectionClick = ({\n    target\n  }) => {\n    if (!target.classList.contains(\"nameLi\")) {\n      InputRef.current.focus();\n    }\n\n    return;\n  };\n\n  const handleOutsideClick = () => {\n    // Leave dropdown visible as long as input is focused\n    if (document.activeElement === inputRef.current) return;else setShowList(false);\n  };\n\n  const matches = () => {\n    const {\n      inputVal\n    } = inputVal;\n    const {\n      names\n    } = props;\n    const inputLength = inputVal.length;\n    const matches = [];\n    if (inputLength === 0) return names;\n    names.forEach(name => {\n      const nameSegment = name.slice(0, inputLength);\n\n      if (nameSegment.toLowerCase() === inputVal.toLowerCase()) {\n        matches.push(name);\n      }\n    });\n    if (matches.length === 0) matches.push('No matches');\n    return matches;\n  };\n\n  const results = matches().map(result => {\n    const nodeRef = /*#__PURE__*/React.createRef();\n    return /*#__PURE__*/_jsxDEV(CSSTransition, {\n      nodeRef: nodeRef,\n      classNames: \"result\",\n      timeout: {\n        enter: 500,\n        exit: 300\n      },\n      children: /*#__PURE__*/_jsxDEV(\"li\", {\n        ref: nodeRef,\n        className: \"nameLi\",\n        onClick: selectName,\n        children: result\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 11\n      }, this)\n    }, result, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 9\n    }, this);\n  });\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    className: \"autocomplete-section\",\n    onClick: handleAutocompleteSectionClick,\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Autocomplete\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"auto\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        placeholder: \"Search...\",\n        ref: inputRef,\n        onChange: handleInput,\n        value: inputVal,\n        onFocus: () => setShowList(true)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 11\n      }, this), showLIst && /*#__PURE__*/_jsxDEV(\"ul\", {\n        className: \"auto-dropdown\",\n        children: /*#__PURE__*/_jsxDEV(TransitionGroup, {\n          children: results\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 90,\n    columnNumber: 7\n  }, this);\n};\n\n_s(AutoComplete, \"OrOUio/LQe7Vxm+jdp3eVUeWK6E=\");\n\n_c = AutoComplete;\nexport default AutoComplete;\n\nvar _c;\n\n$RefreshReg$(_c, \"AutoComplete\");","map":{"version":3,"sources":["/home/haeuncreative/app_academy/hw_lectures/w11/w11d2/widgets2/src/components/Auto.js"],"names":["React","useState","useEffect","useRef","CSSTransition","TransitionGroup","AutoComplete","props","inputVal","setInputVal","showList","setShowList","document","addEventListener","handleOutsideClick","console","log","removeEventListener","handleInput","e","target","value","selectName","innerText","name","handleAutocompleteSectionClick","classList","contains","InputRef","current","focus","activeElement","inputRef","matches","names","inputLength","length","forEach","nameSegment","slice","toLowerCase","push","results","map","result","nodeRef","createRef","enter","exit","showLIst"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport { CSSTransition, TransitionGroup } from 'react-transition-group';\n\nconst AutoComplete = props => {\n\n  const [inputVal, setInputVal] = useState(\"\")\n  const [showList, setShowList] = useState(\"false\")\n\n  // constructor(props) {\n  //   super(props);\n  //   this.state = {\n  //     inputVal: '',\n  //     showList: false\n  //   };\n  //   this.inputRef = React.createRef();\n  // }\n  useEffect(() => {\n   if (showList) {\n      document.addEventListener('click', handleOutsideClick);\n    } else {\n      console.log(\"Removing Autocomplete listener on update!\");\n      document.removeEventListener('click', handleOutsideClick);\n    }\n    return () => {\n      console.log(\"Cleaning up event listener from Autocomplete!\");\n      document.removeEventListener('click', handleOutsideClick);\n    } \n  }, [])\n\n  const handleInput = (e) => {\n    setInputVal(e.target.value);\n  }\n\n  const selectName = ({ target:  { innerText: name }}) => {\n    setInputVal(name)\n    setShowList(false)  }\n\n  // Set focus to input field if user clicks anywhere inside the Autocomplete\n  // section (unless they have selected a name from the dropdown list)\n  const handleAutocompleteSectionClick = ({ target }) => {\n    if (!target.classList.contains(\"nameLi\")) {\n      InputRef.current.focus();\n    }\n    return\n  }\n\n  const handleOutsideClick = () => {\n    // Leave dropdown visible as long as input is focused\n    if (document.activeElement === inputRef.current) return;\n    else setShowList(false);\n  }\n\n  const matches = () => {\n    const { inputVal } = inputVal;\n    const { names } = props;\n    const inputLength = inputVal.length;\n    const matches = [];\n\n    if (inputLength === 0) return names;\n\n    names.forEach(name => {\n      const nameSegment = name.slice(0, inputLength);\n      if (nameSegment.toLowerCase() === inputVal.toLowerCase()) {\n        matches.push(name);\n      }\n    });\n\n    if (matches.length === 0) matches.push('No matches');\n\n    return matches;\n  }\n\n    const results = matches().map((result) => {\n      const nodeRef = React.createRef();\n      return (\n        <CSSTransition\n          nodeRef={nodeRef}\n          key={result}\n          classNames=\"result\"\n          timeout={{ enter: 500, exit: 300 }}\n        >\n          <li ref={nodeRef} className=\"nameLi\" onClick={selectName}>\n            {result}\n          </li>\n        </CSSTransition>\n      )\n    });\n\n    return (\n      <section \n        className=\"autocomplete-section\" \n        onClick={handleAutocompleteSectionClick}\n      >\n        <h1>Autocomplete</h1>\n        <div className=\"auto\">\n          <input\n            placeholder=\"Search...\"\n            ref={inputRef}\n            onChange={handleInput}\n            value={inputVal}\n            onFocus={() => setShowList(true)}\n          />\n          {showLIst && (\n            <ul className=\"auto-dropdown\">\n              <TransitionGroup>\n                {results}\n              </TransitionGroup>\n            </ul>\n          )}\n        </div>\n      </section>\n    );\n  }\n\n\nexport default AutoComplete;"]},"metadata":{},"sourceType":"module"}